(window.webpackJsonp=window.webpackJsonp||[]).push([[59],{425:function(v,_,e){v.exports=e.p+"assets/img/image-20201126155411033.9d3ea256.png"},768:function(v,_,e){"use strict";e.r(_);var t=e(28),l=Object(t.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h2",{attrs:{id:"golang-25个关键字"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#golang-25个关键字"}},[v._v("#")]),v._v(" golang 25个关键字")]),v._v(" "),t("ul",[t("li",[v._v("var和const ：变量和常量的声明")]),v._v(" "),t("li",[v._v("var varName type  或者 varName : = value")]),v._v(" "),t("li",[v._v("package and import: 导入")]),v._v(" "),t("li",[v._v("func： 用于定义函数和方法")]),v._v(" "),t("li",[v._v("return ：用于从函数返回")]),v._v(" "),t("li",[v._v("defer someCode ：在函数退出之前执行")]),v._v(" "),t("li",[v._v("go : 用于并行")]),v._v(" "),t("li",[v._v("select 用于选择不同类型的通讯")]),v._v(" "),t("li",[v._v("interface 用于定义接口")]),v._v(" "),t("li",[v._v("struct 用于定义抽象数据类型")]),v._v(" "),t("li",[v._v("break、case、continue、for、fallthrough、else、if、switch、goto、default 流程控制")]),v._v(" "),t("li",[v._v("chan用于channel通讯")]),v._v(" "),t("li",[v._v("type用于声明自定义类型")]),v._v(" "),t("li",[v._v("map用于声明map类型数据")]),v._v(" "),t("li",[v._v("range用于读取slice、map、channel数据")])]),v._v(" "),t("h2",{attrs:{id:"golang-内建类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#golang-内建类型"}},[v._v("#")]),v._v(" golang 内建类型")]),v._v(" "),t("ul",[t("li",[v._v("内置字符串类型：string.")]),v._v(" "),t("li",[v._v("内置布尔类型：bool.")]),v._v(" "),t("li",[v._v("内置数值类型：")]),v._v(" "),t("li",[v._v("int8、uint8（byte）、int16、uint16、int32（rune）、uint32、int64、uint64、int、uint、uintptr。")]),v._v(" "),t("li",[v._v("float32、float64。")]),v._v(" "),t("li",[v._v("complex64、complex128。")]),v._v(" "),t("li",[v._v("注意，byte是uint8的一个内置别名，rune是int32的一个内置别名。 下面将要提到如何声明自定义的类型别名。")])]),v._v(" "),t("p",[t("code",[v._v("我们可以用unsafe标准库包中的Sizeof函数来取得任何一个值的尺寸")])]),v._v(" "),t("p",[t("code",[v._v("[参考go语言经典]")])]),v._v(" "),t("p",[t("a",{attrs:{href:"https://gfw.go101.org/article/type-system-overview.html#:~:text=%E5%86%85%E7%BD%AE%E6%95%B0%E5%80%BC%E7%B1%BB%E5%9E%8B%EF%BC%9A,complex64%20%E3%80%81%20complex128%20%E3%80%82",target:"_blank",rel:"noopener noreferrer"}},[v._v("参考链接2"),t("OutboundLink")],1)]),v._v(" "),t("img",{staticStyle:{zoom:"90%"},attrs:{src:e(425),alt:"image-20201126155411033"}}),v._v(" "),t("h2",{attrs:{id:"golang-数据类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#golang-数据类型"}},[v._v("#")]),v._v(" golang 数据类型")]),v._v(" "),t("ul",[t("li",[t("p",[t("code",[v._v("基础类型")]),v._v(" "),t("code",[v._v("复合类型")]),v._v(" "),t("code",[v._v("引用类型")]),v._v(" "),t("code",[v._v("接口类型")])])]),v._v(" "),t("li",[t("p",[v._v("基础类型")])]),v._v(" "),t("li",[t("p",[t("code",[v._v("数字")]),v._v(" "),t("code",[v._v("字符串")]),v._v(" "),t("code",[v._v("布尔")])])]),v._v(" "),t("li",[t("p",[v._v("复合类型")])]),v._v(" "),t("li",[t("p",[t("code",[v._v("数组")]),v._v(" "),t("code",[v._v("结构体")])])]),v._v(" "),t("li",[t("p",[v._v("引用类型  (它们都是对程序中变量或者状态的间接引用,"),t("code",[v._v("数据修改会影响所有该引用的拷贝")]),v._v(")")])]),v._v(" "),t("li",[t("p",[t("code",[v._v("指针")]),v._v(" "),t("code",[v._v("切片")]),v._v(" "),t("code",[v._v("字典")]),v._v(" "),t("code",[v._v("函数")]),v._v(" "),t("code",[v._v("通道")])])]),v._v(" "),t("li",[t("p",[v._v("接口类型")])]),v._v(" "),t("li")])])}),[],!1,null,null,null);_.default=l.exports}}]);