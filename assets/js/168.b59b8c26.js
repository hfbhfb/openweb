(window.webpackJsonp=window.webpackJsonp||[]).push([[168],{802:function(v,_,t){"use strict";t.r(_);var l=t(28),e=Object(l.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("ul",[t("li",[v._v("CAP 相关知识")])]),v._v(" "),t("div",{attrs:{align:"center"}},[v._v("CAP概念")]),v._v(" "),t("hr"),v._v(" "),t("ul",[t("li",[t("p",[v._v("CAP 概念应用于分布式存储   注:这和"),t("code",[v._v("高可用")]),v._v(" 什么关系?,这个概念的精要是只能取其二")])]),v._v(" "),t("li",[t("p",[v._v("Consistency(一致性) : 所有节点访问同一份最新的数据副本")])]),v._v(" "),t("li",[t("p",[v._v("Availability(可用性)   : 每个请求不管成功失败都有响应")])]),v._v(" "),t("li",[t("p",[v._v("Partition tolerance(分区容错性) : 系统中任意信息的丢失或失败不会影响系统的继续作")])])]),v._v(" "),t("div",{attrs:{align:"center"}},[v._v("分布式锁使用的中间件")]),v._v(" "),t("hr"),v._v(" "),t("ul",[t("li",[t("p",[v._v("?? 解析为什么redis 是AP类型的")])]),v._v(" "),t("li",[t("p",[v._v("如果在某个分布式系统中数据无副本,那系统必然满足强一致性C条件,不会出现数据不一致的情况.如果又具备分区容忍性P,那么必然导致某些数据(应该是某些连接,不能出错返回让应用重连?)不可访问,则可用性A不能被满足")])])]),v._v(" "),t("table",[t("thead",[t("tr",[t("th"),v._v(" "),t("th",[v._v("Redis")]),v._v(" "),t("th",[v._v("zookeeper")]),v._v(" "),t("th",[v._v("etcd")])])]),v._v(" "),t("tbody",[t("tr",[t("td",[v._v("一致性算法")]),v._v(" "),t("td",[v._v("无")]),v._v(" "),t("td",[v._v("poxes")]),v._v(" "),t("td",[v._v("raft")])]),v._v(" "),t("tr",[t("td",[v._v("CAP")]),v._v(" "),t("td",[v._v("AP")]),v._v(" "),t("td",[v._v("CP")]),v._v(" "),t("td",[v._v("CP")])]),v._v(" "),t("tr",[t("td",[t("code",[v._v("高可用")])]),v._v(" "),t("td",[v._v("主从+哨兵")]),v._v(" "),t("td",[v._v("N+1可用")]),v._v(" "),t("td",[v._v("N+1可用")])]),v._v(" "),t("tr",[t("td",[v._v("接口")]),v._v(" "),t("td",[v._v("客户端")]),v._v(" "),t("td",[v._v("客户端")]),v._v(" "),t("td",[v._v("http/grpc")])]),v._v(" "),t("tr",[t("td",[v._v("实现")]),v._v(" "),t("td",[v._v("setnx")]),v._v(" "),t("td",[v._v("create**")]),v._v(" "),t("td",[v._v("restfulAPI")])])])]),v._v(" "),t("div",{attrs:{align:"center"}},[v._v("CAP与mysql关系 ACID")]),v._v(" "),t("hr"),v._v(" "),t("ul",[t("li",[v._v("A原子性(Atomicity) : 即事务中执行多个操作是原子的,要么事务中的操作全部执行,要么一个都不执行")]),v._v(" "),t("li",[v._v("C一致性(Consistency) : 即保证进行事务的过程中整个数据库的状态是一致的")]),v._v(" "),t("li",[v._v("I隔离性(Isolation) : 两个事务不会相互影响,覆盖彼此数据等")]),v._v(" "),t("li",[v._v("D持久化(Durability) : 即事务一旦完成,那数据应该是被写到安全的,持久化存储设备上")]),v._v(" "),t("li",[v._v("mysql 支持事务")]),v._v(" "),t("li",[v._v("mysql 一般不支持分区容错性")]),v._v(" "),t("li",[v._v("mysql性能低(读写),对于一些web应用场景下可用性(A)受到影响  场景:发一条消息,几秒乃至十几秒,订阅者才看到是可接受的")])]),v._v(" "),t("div",{attrs:{align:"center"}},[v._v("CAP与NoSql关系")]),v._v(" "),t("hr"),v._v(" "),t("ul",[t("li",[v._v("NoSql仅提供对行级别的原子性 : 即同时对同一个Key下的数据进行两个操作,在实际执行的被串行化,保证Key-Value对不会被破坏")])]),v._v(" "),t("div",{attrs:{align:"center"}},[v._v("CAP与BASE概念")]),v._v(" "),t("hr"),v._v(" "),t("ul",[t("li",[v._v("基本可用(Basically Available) : 注:不等价于系统不可用 例如在线搜索需要0.5秒返回给用户,由于出现异常(断电或者断网),查询结果增加到1-2秒.  节日大促时,部分消费者被引导到降级页面")]),v._v(" "),t("li",[v._v("软状态(Soft state) : 即允许系统中存在中间状态,允许系统在不同节点的数据副本进行数据同步过程存在延时")]),v._v(" "),t("li",[v._v("最终一致性(Eventually consistent) : 强调的是系统中所有数据经过一段时间都能达到一个一致状态(比如我付了款->过了几秒才从支付宝中同步过来了支付状态)")])])])}),[],!1,null,null,null);_.default=e.exports}}]);