(window.webpackJsonp=window.webpackJsonp||[]).push([[140],{769:function(t,l,n){"use strict";n.r(l);var v=n(28),_=Object(v.a)({},(function(){var t=this,l=t.$createElement,n=t._self._c||l;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("ul",[n("li",[t._v("参考 https://blog.csdn.net/qmhball/article/details/113771087")])]),t._v(" "),n("ol",[n("li",[n("p",[t._v("布尔类型\n可比较")])]),t._v(" "),n("li",[n("p",[t._v("整型\n可比较")])]),t._v(" "),n("li",[n("p",[t._v("浮点数\n可比较")])]),t._v(" "),n("li",[n("p",[t._v("复数\n可比较。")])]),t._v(" "),n("li",[n("p",[t._v("字串\n可比较")])]),t._v(" "),n("li",[n("p",[t._v("指针值\n可比较。")])])]),t._v(" "),n("p",[t._v("两个指针指向同一个变量，则这两个指针相等，或者两个指针同为nil，它们也相等。指针值可以与nil比较。")]),t._v(" "),n("ol",{attrs:{start:"7"}},[n("li",[t._v("通道值\n可比较。")])]),t._v(" "),n("p",[t._v("如果两个通道是由同一个make创建的，或者两个通道值都为nil，那么它们是相等的。")]),t._v(" "),n("ol",{attrs:{start:"8"}},[n("li",[t._v("接口值\n可比较。")])]),t._v(" "),n("p",[t._v("接口值是一个两个字长度的数据结构，如下图所示。第一个字包含一个指向内部表的指针。这个内部表叫作iTable，包含了已存储的值的类型信息（动态类型）以及与这个值相关联的一组方法。第二个字是一个指向所存储值（动态值）的指针。")]),t._v(" "),n("p",[t._v("如果两个接口值的动态值和动态类型都相等，或者两个接口值都为nil，那么它们是相等的。接口值可以与nil进行比较。")]),t._v(" "),n("ol",{attrs:{start:"9"}},[n("li",[t._v("接口与非接口\n如果非接口的类型X的值x与接口类型T的值t满足：")])]),t._v(" "),n("p",[t._v("X本身是可比类型\nX实现了T\n则两者的值可以进行比较。如果t的动态类型是X，t动态值与x相同，则t和x相等。")]),t._v(" "),n("p",[t._v("10 .map\n不可比。只能与nil比较")]),t._v(" "),n("ol",{attrs:{start:"11"}},[n("li",[n("p",[t._v("slice\n不可比。只能与nil比较")])]),t._v(" "),n("li",[n("p",[t._v("func\n不可比。只能与nil比较")])]),t._v(" "),n("li",[n("p",[t._v("struct\n如果struct中所有的字段都是可比较的，那么两个struct是可比较的。如果struct对应的非空白字段相等，则它们相等。struct不能与nil比较。")])]),t._v(" "),n("li",[n("p",[t._v("数组\n如果数组中的元素类型是可比的，则数组也是可比较的。如果数组中对应的元素都相等，那么两个数组是相等的。数组不能与nil比较")])])])])}),[],!1,null,null,null);l.default=_.exports}}]);