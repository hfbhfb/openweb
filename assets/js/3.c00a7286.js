(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{1007:function(t,i,s){"use strict";s.r(i);var a=s(28),e=Object(a.a)({},(function(){var t=this,i=t.$createElement,a=t._self._c||i;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"执行阶段-语言-特性-机制-如何获取类型信息"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#执行阶段-语言-特性-机制-如何获取类型信息"}},[t._v("#")]),t._v(" 执行阶段: 语言 "),a("code",[t._v("特性")]),t._v(" "),a("code",[t._v("机制")]),t._v(" 如何获取类型信息")]),t._v(" "),a("ul",[a("li",[t._v("\b反射")]),t._v(" "),a("li",[t._v("接口动态派发")]),t._v(" "),a("li",[t._v("类型断言")])]),t._v(" "),a("h2",{attrs:{id:"内置类型与自定义类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内置类型与自定义类型"}},[t._v("#")]),t._v(" 内置类型与自定义类型")]),t._v(" "),a("ul",[a("li",[a("img",{staticStyle:{zoom:"50%"},attrs:{src:s(572),alt:"image-20210329173437907"}})]),t._v(" "),a("li",[a("p",[a("code",[t._v("不能给自定义类型定义方法")]),t._v(" "),a("code",[t._v("接口类型是无效的方法接收者")])])]),t._v(" "),a("li",[a("img",{staticStyle:{zoom:"50%"},attrs:{src:s(573),alt:"image-20210329173652150"}})]),t._v(" "),a("li",[a("p",[t._v("类型元数据  "),a("code",[t._v("全局唯一")]),t._v("  构成了go的"),a("code",[t._v("类型系统")])])]),t._v(" "),a("li",[a("img",{staticStyle:{zoom:"50%"},attrs:{src:s(574),alt:"image-20210329173757334"}})]),t._v(" "),a("li",[a("p",[a("code",[t._v("类型元数据")]),t._v(" 对应的结构体 runtime._type")])]),t._v(" "),a("li",[a("img",{staticStyle:{zoom:"50%"},attrs:{src:s(575),alt:"image-20210329175248972"}})]),t._v(" "),a("li",[a("p",[t._v("结构体对应")])]),t._v(" "),a("li",[a("img",{staticStyle:{zoom:"50%"},attrs:{src:s(576),alt:"image-20210329175856752"}})]),t._v(" "),a("li",[a("p",[t._v("两种类型定义的区别")])]),t._v(" "),a("li",[a("img",{staticStyle:{zoom:"50%"},attrs:{src:s(577),alt:"image-20210329221358657"}})]),t._v(" "),a("li",[a("p",[t._v("引入了类型元数据  -> 就好解释接口了")])]),t._v(" "),a("li",[a("img",{staticStyle:{zoom:"50%"},attrs:{src:s(578),alt:"image-20210329221555092"}})]),t._v(" "),a("li",[a("p",[a("code",[t._v("空接口类型")]),t._v("变量的 赋值前后变化")])]),t._v(" "),a("li",[a("img",{staticStyle:{zoom:"50%"},attrs:{src:s(579),alt:"image-20210329221810247"}})]),t._v(" "),a("li",[a("p",[a("code",[t._v("非空接口类型")]),t._v(" 对应的结构体为 iface")])]),t._v(" "),a("li",[a("img",{staticStyle:{zoom:"50%"},attrs:{src:s(580),alt:"image-20210329222036012"}})]),t._v(" "),a("li",[a("p",[t._v("非空接口赋值前后变化")])]),t._v(" "),a("li",[a("img",{staticStyle:{zoom:"50%"},attrs:{src:s(581),alt:"image-20210329222347799"}})]),t._v(" "),a("li",[a("p",[t._v("itab结构体缓存到内存  hash表  与 "),a("code",[t._v("map底层不同")])])]),t._v(" "),a("li",[a("img",{staticStyle:{zoom:"50%"},attrs:{src:s(582),alt:"image-20210329222616510"}})])]),t._v(" "),a("h2",{attrs:{id:"类型断言的判断"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类型断言的判断"}},[t._v("#")]),t._v(" 类型断言的判断")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("空接口.(具体类型)")])]),t._v(" "),a("li",[a("p",[t._v("空接口.(非空接口)")])]),t._v(" "),a("li",[a("p",[t._v("非空接口.(具体类型)")])]),t._v(" "),a("li",[a("p",[t._v("非空接口.(非空接口)")])]),t._v(" "),a("li",[a("img",{staticStyle:{zoom:"50%"},attrs:{src:s(583),alt:"image-20210329231224498"}})]),t._v(" "),a("li",[a("img",{staticStyle:{zoom:"50%"},attrs:{src:s(584),alt:"image-20210329231441414"}})]),t._v(" "),a("li",[a("img",{staticStyle:{zoom:"50%"},attrs:{src:s(585),alt:"image-20210329231544616"}})]),t._v(" "),a("li",[a("p",[t._v("断言失败的结构体也会被缓存起来")])]),t._v(" "),a("li",[a("img",{staticStyle:{zoom:"50%"},attrs:{src:s(586),alt:"image-20210329231819672"}})]),t._v(" "),a("li",[a("img",{staticStyle:{zoom:"50%"},attrs:{src:s(587),alt:"image-20210329231918829"}})]),t._v(" "),a("li",[a("img",{staticStyle:{zoom:"50%"},attrs:{src:s(588),alt:"image-20210329232000549"}})]),t._v(" "),a("li",[a("img",{staticStyle:{zoom:"50%"},attrs:{src:s(589),alt:"image-20210329232054398"}})]),t._v(" "),a("li",[a("img",{staticStyle:{zoom:"50%"},attrs:{src:s(590),alt:"image-20210329232259072"}})]),t._v(" "),a("li",[a("p",[t._v("关键  "),a("code",[t._v("接口")]),t._v(" "),a("code",[t._v("非空接口")]),t._v(" 的类型结构")])]),t._v(" "),a("li",[a("p",[t._v("汇总 "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:s(591),alt:"image-20210329232503316"}})])]),t._v(" "),a("li",[a("p",[t._v("reflect 一对一对应结构体")])]),t._v(" "),a("li",[a("img",{staticStyle:{zoom:"50%"},attrs:{src:s(592),alt:"image-20210414171944404"}})]),t._v(" "),a("li",[a("p",[t._v("unsafe包中的这个escapes函数通过无法到达的代码欺骗了编译器，让其产生了interface值可能被拷贝，其中的内存会被外部引用的错觉，，巧妙且安全的达成了目的！！！（至于汇编层面的证明，留到后日吧（））")]),t._v(" "),a("p",[t._v("综上，当一个函数的形参为 interface 类型时，在编译阶段编译器无法确定其具体的类型，如果这个值在内层函数中向外抛出则会因此产生逃逸，最终使得传入前的参数分配到堆上，看来go的interface饱受各位大手子诟病的龟速就是来源于类型断定的诸多鸡毛事以及会导致内存分配在堆上，各种层面降低了缓存命中率\n————————————————\n原文链接：https://blog.csdn.net/qq_35587463/article/details/104221280")])])]),t._v(" "),a("p",[a("a",{attrs:{href:"https://www.bilibili.com/video/BV1iZ4y1T7zF",target:"_blank",rel:"noopener noreferrer"}},[t._v("素材来源视频"),a("OutboundLink")],1)])])}),[],!1,null,null,null);i.default=e.exports},572:function(t,i,s){t.exports=s.p+"assets/img/image-20210329173437907.d2204647.png"},573:function(t,i,s){t.exports=s.p+"assets/img/image-20210329173652150.cd02fafd.png"},574:function(t,i,s){t.exports=s.p+"assets/img/image-20210329173757334.6241ff46.png"},575:function(t,i,s){t.exports=s.p+"assets/img/image-20210329175248972.99576a04.png"},576:function(t,i,s){t.exports=s.p+"assets/img/image-20210329175856752.3c30475e.png"},577:function(t,i,s){t.exports=s.p+"assets/img/image-20210329221358657.b40cc6fa.png"},578:function(t,i,s){t.exports=s.p+"assets/img/image-20210329221555092.68716e41.png"},579:function(t,i,s){t.exports=s.p+"assets/img/image-20210329221810247.d89271f1.png"},580:function(t,i,s){t.exports=s.p+"assets/img/image-20210329222036012.f0906a86.png"},581:function(t,i,s){t.exports=s.p+"assets/img/image-20210329222347799.3a45fc24.png"},582:function(t,i,s){t.exports=s.p+"assets/img/image-20210329222616510.f940fe4e.png"},583:function(t,i,s){t.exports=s.p+"assets/img/image-20210329231224498.15b5fe43.png"},584:function(t,i,s){t.exports=s.p+"assets/img/image-20210329231441414.2d7f6bef.png"},585:function(t,i,s){t.exports=s.p+"assets/img/image-20210329231544616.e27a38e0.png"},586:function(t,i,s){t.exports=s.p+"assets/img/image-20210329231819672.09464ea6.png"},587:function(t,i,s){t.exports=s.p+"assets/img/image-20210329231918829.8a90db1c.png"},588:function(t,i,s){t.exports=s.p+"assets/img/image-20210329232000549.e59e681a.png"},589:function(t,i,s){t.exports=s.p+"assets/img/image-20210329232054398.4f748c80.png"},590:function(t,i,s){t.exports=s.p+"assets/img/image-20210329232259072.ea612f38.png"},591:function(t,i,s){t.exports=s.p+"assets/img/image-20210329232503316.7f6e0b3c.png"},592:function(t,i,s){t.exports=s.p+"assets/img/image-20210414171944404.56b406fd.png"}}]);