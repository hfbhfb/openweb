(window.webpackJsonp=window.webpackJsonp||[]).push([[343],{1020:function(e,t,o){"use strict";o.r(t);var r=o(28),n=Object(r.a)({},(function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("ul",[o("li",[e._v("夜读的一份面试问题 https://github.com/talkgo/night/blob/master/content/interview/interview-golang-language.md")])]),e._v(" "),o("hr"),e._v(" "),o("h2",{attrs:{id:"title-golang语言date-2018-07-26t00-00-00-08-00"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#title-golang语言date-2018-07-26t00-00-00-08-00"}},[e._v("#")]),e._v(" title:  Golang语言\ndate: 2018-07-26T00:00:00+08:00")]),e._v(" "),o("p",[o("em",[e._v("1.select是随机的还是顺序的？")])]),e._v(" "),o("blockquote",[o("p",[e._v("select会"),o("code",[e._v("随机")]),e._v("选择一个可用通道做收发操作")])]),e._v(" "),o("p",[o("em",[e._v("2.Go语言局部变量分配在栈还是堆？")])]),e._v(" "),o("blockquote",[o("p",[e._v("Go语言编译器会自动决定把一个变量放在栈还是放在堆，编译器会做"),o("code",[e._v("逃逸分析")]),e._v("，当发现变量的作用域没有跑出函数范围，就可以在栈上，反之则必须分配在堆。")]),e._v(" "),o("p",[o("a",{attrs:{href:"https://www.jianshu.com/p/4e3478e9d252",target:"_blank",rel:"noopener noreferrer"}},[e._v("查看资料"),o("OutboundLink")],1)])]),e._v(" "),o("p",[o("em",[e._v("3.简述一下你对Go垃圾回收机制的理解？")])]),e._v(" "),o("blockquote",[o("p",[e._v("v1.1 STW"),o("br"),e._v("\nv1.3 Mark STW, Sweep 并行"),o("br"),e._v("\nv1.5 三色标记法"),o("br"),e._v("\nv1.8 hybrid write barrier(混合写屏障：优化STW)")]),e._v(" "),o("p",[o("a",{attrs:{href:"http://legendtkl.com/2017/04/28/golang-gc/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Golang垃圾回收剖析"),o("OutboundLink")],1)])]),e._v(" "),o("p",[o("em",[e._v("4.简述一下golang的协程调度原理?")])]),e._v(" "),o("blockquote",[o("p",[o("code",[e._v("M(machine)")]),e._v(": 代表着真正的执行计算资源，可以认为它就是os thread（系统线程）。"),o("br"),e._v(" "),o("code",[e._v("P(processor)")]),e._v(": 表示逻辑processor，是线程M的执行的上下文。"),o("br"),e._v(" "),o("code",[e._v("G(goroutine)")]),e._v(": 调度系统的最基本单位goroutine，存储了goroutine的执行stack信息、goroutine状态以及goroutine的任务函数等。")]),e._v(" "),o("p",[o("a",{attrs:{href:"https://github.com/talkgo/night/blob/master/reading/20180802/README.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("查看资料"),o("OutboundLink")],1)])]),e._v(" "),o("p",[o("em",[e._v("5.介绍下 golang 的 runtime 机制?")])]),e._v(" "),o("blockquote",[o("p",[e._v("Runtime 负责管理任务调度，垃圾收集及运行环境。同时，Go提供了一些高级的功能，如goroutine, channel, 以及Garbage collection。这些高级功能需要一个runtime的支持. runtime和用户编译后的代码被linker静态链接起来，形成一个可执行文件。这个文件从操作系统角度来说是一个user space的独立的可执行文件。\n从运行的角度来说，这个文件由2部分组成，一部分是用户的代码，另一部分就是runtime。runtime通过接口函数调用来管理goroutine, channel及其他一些高级的功能。从用户代码发起的调用操作系统API的调用都会被runtime拦截并处理。")])]),e._v(" "),o("blockquote",[o("p",[e._v("Go runtime的一个重要的组成部分是goroutine scheduler。他负责追踪，调度每个goroutine运行，实际上是从应用程序的process所属的thread pool中分配一个thread来执行这个goroutine。因此，和java虚拟机中的Java thread和OS thread映射概念类似，每个goroutine只有分配到一个OS thread才能运行。")])]),e._v(" "),o("blockquote",[o("p",[o("a",{attrs:{href:"https://blog.csdn.net/xclyfe/article/details/50562349",target:"_blank",rel:"noopener noreferrer"}},[e._v("相关资料"),o("OutboundLink")],1)])]),e._v(" "),o("p",[o("img",{attrs:{src:"/images/goruntime.png",alt:""}})]),e._v(" "),o("p",[o("em",[e._v("6.如何获取 go 程序运行时的协程数量, gc 时间, 对象数, 堆栈信息?")])]),e._v(" "),o("p",[e._v("调用接口 runtime.ReadMemStats 可以获取以上所有信息, "),o("strong",[e._v("注意: 调用此接口会触发 STW(Stop The World)")]),o("br"),e._v("\n参考: https://golang.org/pkg/runtime/#ReadMemStats")]),e._v(" "),o("p",[e._v("如果需要打入到日志系统, 可以使用 go 封装好的包, 输出 json 格式. 参考:")]),e._v(" "),o("ol",[o("li",[e._v("https://golang.org/pkg/expvar/")]),e._v(" "),o("li",[e._v("http://blog.studygolang.com/2017/06/expvar-in-action/")])]),e._v(" "),o("p",[e._v("更深入的用法就是将得到的运行时数据导入到 ES 内部, 然后使用 Kibana 做 golang 的运行时监控, 可以实时获取到运行的信息(堆栈, 对象数, gc 时间, goroutine, 总内存使用等等), "),o("a",{attrs:{href:"https://golang.org/pkg/runtime/#MemStats",target:"_blank",rel:"noopener noreferrer"}},[e._v("具体信息可以看 ReadMemStats 的那个结构体"),o("OutboundLink")],1)]),e._v(" "),o("p",[e._v("效果大致如下:"),o("br"),e._v(" "),o("img",{attrs:{src:"/images/golang-goroutine-object.png",alt:""}})]),e._v(" "),o("p",[o("em",[e._v("7.介绍下你平时都是怎么调试 golang 的 bug 以及性能问题的?")])]),e._v(" "),o("blockquote",[o("ol",[o("li",[e._v("panic 调用栈")]),e._v(" "),o("li",[e._v("pprof")]),e._v(" "),o("li",[e._v("火焰图(配合压测)")]),e._v(" "),o("li",[e._v("使用go run -race 或者 go build -race 来进行竞争检测")]),e._v(" "),o("li",[e._v("查看系统 磁盘IO/网络IO/内存占用/CPU 占用(配合压测)")])])]),e._v(" "),o("p",[o("em",[e._v("8.简单介绍下 golang 中 make 和 new 的区别")])]),e._v(" "),o("blockquote",[o("p",[e._v("new(T) 是为一个 T 类型的新值分配空间, 并将此空间初始化为 T 的零值, 并返回这块内存空间的地址, 也就是 T 类型的指针 *T, 该指针指向 T 类型值占用的那块内存.\nmake(T) 返回的是初始化之后的 T, 且只能用于 slice, map, channel 三种类型. make(T, args) 返回初始化之后 T 类型的值, 且此新值并不是 T 类型的零值, 也不是 T 类型的指针 *T, 而是 T 类型值经过初始化之后的引用.")])]),e._v(" "),o("p",[e._v("参考:")]),e._v(" "),o("blockquote",[o("ol",[o("li",[e._v("https://www.cnblogs.com/ghj1976/archive/2013/02/12/2910384.html")]),e._v(" "),o("li",[e._v("https://studygolang.com/articles/3496")])])])])}),[],!1,null,null,null);t.default=n.exports}}]);